---
title: "."
title-slide-attributes: 
  data-background-image: "image/background.png"
  data-background-size: contain
format: 
  revealjs:
    theme: [simple, custom.scss]
    preview-links: auto
    code-fold: false
    chalkboard: true
    slide-number: true
    footer: "Econ 149: analytical and statistical packages for economics"
engine: knitr
from: markdown+emoji
include-after-body: "collapseoutput.js"
editor: visual
---

```{r}
#| echo: false
#| include: false

knitr::opts_chunk$set(comment = "", collapse = TRUE)

## libraries
library(tidyverse)
library(janitor)
library(EFAtools)
library(psych)

## theme

# data management
data <- haven::read_sav("data/HBAT.sav") |> 
  select(x6:x18) |>  
  select(-x15, -x17) |>  # removing variables with below acceptable MSA
  tibble() |> 
  mutate_all(.funs = as.numeric) |> 
  clean_names() |> 
  mutate_all(.funs = ~ round(.x, 2))

```

## Factor analysis process

**Stage 1**: Objectives of factor analysis

**Stage 2**: Designing an Exploratory factor analysis

**Stage 3**: Assumptions in Exploratory factor analysis

**Stage 4**: Deriving factors and assessing overall fit

**Stage 5**: Interpreting the factors

# Stage 1 : Objectives of factor analysis

## Overview

::: center-figure
```{r echo=FALSE, out.width="38%", fig.align='center'}
knitr::include_graphics("image/overview_factor.jpg")
```
:::

::: aside
Source: [Dragan and Darja (2014): Introduction to SEM: review, methodology and practical applications.](https://www.researchgate.net/publication/267810858_Introduction_to_Structural_Equation_Modeling_Review_Methodology_and_Practical_Applications)
:::

## Overview

:::::: columns
::: {.column width="45%"}
#### Exploratory factor analysis

-   Exploratory or descriptive technique to determine the appropriate number of common factor.

-   No specifications are made in regards to the number of factors (initially) or the pattern of relationships between factor and indicators

-   Looking for patterns in the data
:::

::: {.column width="10%"}
:::

::: {.column width="45%"}
#### Confirmatory factor analysis

-   Should be conducted prior to the specifications of a structural model.

-   Researcher specifies the number of factors and the pattern of indicator-factor in advance.

-   Testing a theory that you know in advance
:::
::::::

# Stage 2: Designing an EFA

## Variable selection and measurement issues

What types of variables can be used in factor analysis?

-   *Primary requirement: a correlation value can be calculated among all variables.*
-   *e.g., metric variables, scale items, dummy variables to represent nonmetric variables.*

<br>

How many variables or items should be used per factor?

-   *Five or more per factor for scale development.*
-   *Three or more per factor for factor measurement (based on how degrees of freedom is computed).*

## Sample size

Some recommendations in literature:

-   Five cases minimum per estimated parameter ([Bentler and Chou, 1987](https://doi.org/10.1177/0049124187016001004))

-   Monte carlo studies recommend 100 cases minimum and 200 is better for modest models ([Loehlin, 2017](https://www.routledge.com/Latent-Variable-Models-An-Introduction-to-Factor-Path-and-Structural/Loehlin-Beaujean/p/book/9781138916074))

-   Larger or complicated models, models with more latent variables or parameter estimates, require more cases.

# Stage 3: Assumptions in EFA

## Sample Dataset

::::: columns
::: column
-   HBAT Industries, manufacturer of paper products.
-   Perceptions on a set of business functions.
-   Rating scale:
    -   `0 "poor"` to `10 "excellent"`
:::

::: {.column .center-figure}
![](image/hbat_data.png)
:::
:::::

## Sample Dataset

::::: columns
::: {.column width="40%"}
-   $X_6$ product quality
-   $X_7$ e-commerce
-   $X_8$ technical support
-   $X_9$ complaint resolution
-   $X_{10}$ advertising
-   $X_{11}$ product line
-   $X_{12}$ salesforce image
-   $X_{13}$ competitive pricing
-   $X_{14}$ warranty claims
-   $X_{15}$ packaging
-   $X_{16}$ order & billing
-   $X_{17}$ price flexibility
-   $X_{18}$ delivery speed
:::

::: {.column width="60%"}
```{r}
#| echo: false
#| class-output: "remark-code"
DT::datatable(data, options = list(pageLength=5))
```
:::
:::::

::: aside
Source: J.F. Hair (2019): Multivariate data analysis.
:::

## Conceptual assumptions

::: {.column width="70%"}
-   Some uderlying structure does exist in the set of selected variables.

-   correlated variables and subsequent definition of factors do not guarantee relevance

    -   *even if they meet the statistical requirement!*

-   It is the responsibility of the researcher to ensure that observed patterns are conceptually valid and appropriate.
:::

## Determining appropriateness of EFA

1.  Bartlett Test

2.  Measure of Sampling Adequacy

## Determining the appropriateness of EFA

::::: columns
::: {.column width="40%"}
#### 1. Bartlett Test

-   Examines the entire correlation matrix
-   Test the hypothesis that correlation matrix is an identity matrix.
-   A significant result signifies data are appropriate for factor analysis.
:::

::: {.column width="60%"}
```{r}
#| echo: true
#| eval: false
#| class-output: "remark-code"
library(EFAtools)
BARTLETT(data, N= nrow(data))
```

<br>

```{r}
#| echo: true
#| class-output: "remark-code"
library(EFAtools)
BARTLETT(data, N= nrow(data))
```
:::
:::::

## Determining the appropriateness of EFA

#### 2. Kaiser-Meyen-Olkin (KMO Test)

-   Measure of sampling adequacy
-   Indicate the proportion of variance explained by the underlying factor.
-   Guidelines:
    -   $\ge 0.90$ - marvelous
    -   $\ge 0.80$ - meritorious
    -   $\ge 0.70$ - middling
    -   $\ge 0.60$ - mediocre
    -   $\ge 0.50$ - miserable
    -   $< 0.50$ - unacceptable

## Determining the appropriateness of EFA

#### 2. Kaiser-Meyen-Olkin (KMO Test)

```{r}
#| echo: true
#| eval: false
#| class-output: "remark-code"

library(psych)
KMO(data)
```

<br>

```{r}
#| echo: true
#| class-output: "remark-code"

library(psych)
KMO(data)
```

## Determining the appropriateness of EFA

#### 2. Kaiser-Meyen-Olkin (KMO Test)

-   When overall MSA is less than 0.50
    -   Identify variables with lowest MSA subject for deletion.
    -   Recalculate MSA
    -   Repeat unitl overall MSA is 0.50 and above
-   Deletion of variables with MSA under 0.50 means variable's correlation with <br>other variables are poorly representing the extracted factor.

# Let's practice!

# Stage 4: Deriving factors and <br>assessing overall fit

## Partitioning the variance of a variable

:::::: columns
::: {.column width="45%"}
#### Unique variance

-   Variance associated with only a specific variable.
-   Not represented in the correlations among variables.
-   *Specific variance*
    -   associated uniquely with a single variable.
-   *Error variance*
    -   May be due to unreliability of data gathering process, measurement error, or a random component in the measured phenomenom.
:::

::: {.column width="10%"}
:::

::: {.column width="45%"}
#### Common variance

-   Shared variance with all other variables.
-   High common variance are more amenable for factor analysis.
-   Derived factors represents the shared or common variance among the variables.
:::
::::::

## Partitioning the variance of a variable

::: center-figure
![](image/deriving_factors.png){fig-align="center" width="70%"}
:::

::: aside
Source: JF Hair et al. (2019) Multivariate data analysis.
:::

## PCA vs Common factor analysis

:::::: columns
::: column
#### Principal component analysis (PCA)

-   Considers the total variance
-   data reduction is a primary concern

#### Common factor analysis

-   Considers only the common variance or shared variance
-   Primary objective is to identify the latent dimensions or constructs
:::

:::: column
::: center-figure
![](image/pca_cfa.png){fig-align="center"}
:::
::::
::::::

::: aside
Source: JF Hair et al. (2019) Multivariate data analysis.
:::

## Exploring possible factors

::::: columns
::: {.column width="40%"}
#### 1. Kaiser-Guttman Criterion

-   Only consider factors whose eigenvalues is greater than 1.

-   Rationale is that factor should account for the variance of at least a single variable if it is to be retained for interpretation.
:::

::: {.column width="60%"}
```{r}
#| echo: true
#| eval: false
library(EFAtools)
KGC(Data, eigen_type = "EFA")
```

![](image/kgc_plot.png){fig-align="center" width="130%"}
:::
:::::

## Exploring possible factors

::::: columns
::: {.column width="40%"}
#### 2. Scree test

-   Identify the optimum number of factors that can be extracted before the amount of unique variance begins to dominate the common variance.

-   Inflection point or the "elbow"
:::

::: {.column width="60%"}
```{r}
#| eval: false
#| echo: true

library(psych)
scree(data)
```

![](image/scree_plot.png){fig-align="center" width="130%"}
:::
:::::

## Exploring possible factors

::::: columns
::: {.column width="40%"}
#### 3. Parallel Test

-   Generates a large number of simulated dataset.
-   Each simulated dataset is factor analyzed.
    -   Results is the average eigenvalues across simulation.
    -   Values are then compared to the eigenvalues extracted from the original dataset.
    -   All factors with eigenvalues above those average eigenvalues are retained.
:::

::: {.column width="60%"}
```{r}
#| eval: false
#| echo: true

library(psych)
fa.parallel(data, fa = "fa")
```

![](image/parallel_plot.png){fig-align="center" width="130%"}
:::
:::::

# Let's practice!

# Stage 5: Interpreting the factors

## Three process of factor intepretation

#### 1. Factor extraction

#### 2. Factor rotation

#### 3. Factor interpretation and re-specification

## Factor extraction

::::: columns
::: {.column width="60%"}
```{r}
#| echo: true
#| eval: false

fa_unrotated <- fa(r = data, nfactors = 4, rotate = "none")
print(fa_unrotated$loadings)
```

<br>

```{r}
#| echo: true
#| class-output: "remark-code"

fa_unrotated <- fa(r = data, nfactors = 4, rotate = "none")
print(fa_unrotated$loadings)
```
:::

::: {.column width="40%"}
#### Loadings

-   Correlation of each variable and the factor.
-   Indicate the degree of correspondence between variable and factor.
-   Higher loadings making the variable representative of the factor.
:::
:::::

## Factor extraction

::::: columns
::: {.column width="60%"}
```{r}
#| echo: true
#| eval: false

fa_unrotated <- fa(r = data, nfactors = 4,rotate = "none")
print(fa_unrotated$loadings)
```

<br>

```{r}
#| echo: true
#| class-output: "remark-code"

fa_unrotated <- fa(r = data, nfactors = 4,rotate = "none")
print(fa_unrotated$loadings)
```
:::

::: {.column width="40%"}
#### Loadings

-   $\le \pm 0.10 \approx$ zero

-   $\pm 0.10$ to $\pm 0.40$ meet the minimal level

-   $\ge \pm 0.50$ practically significant

-   $\ge \pm 0.70 \approx$ well-defined structure

#### SS loadings

-   Eigenvalues - column sum of squared factor loadings.

-   Relative importance of each factor in accounting for the variance associated with the set of variables.
:::
:::::

## Factor rotation

::::: columns
::: column
#### Why do factor rotation?

-   To simplify the complexity of factor loadings.

-   Distribute the loading more clearly into the factors.

-   Facilitate interpretation.
:::

::: column
![](image/factor_rotation.png){fig-align="center" width="90%"}
:::
:::::

## Factor rotation

::::: columns
::: column
```{r}
#| echo: true
#| eval: false
#| class-output: "remark-code"

fa_rotated <- fa(r = data, nfactors = 4,rotate = "varimax")

par(mfrow = c(2, 1))
plot(fa_unrotated$loadings[,1],
     fa_unrotated$loadings[,2],
     xlab = "Factor 1",
     ylab = "Factor 2",
     ylim = c(-1, 1),
     xlim = c(-1, 1),
     main = "No rotation",
     pch = 19,
     cex = 2,
     col = "#6c757d") 
     abline(h=0, v=0)
     text(fa_unrotated$loadings[,1],
          fa_unrotated$loadings[,2],
          labels = rownames(fa_unrotated$loadings),
          pos = 4, cex = 1)

plot(fa_rotated$loadings[,1],
     fa_rotated$loadings[,2],
     xlab = "Factor 1",
     ylab = "Factor 2",
     ylim = c(-1, 1),
     xlim = c(-1, 1),
     main = "With rotation",
     pch = 19,
     cex = 2,
     col = "#6c757d")
     abline(h=0, v=0)
     text(fa_rotated$loadings[,1],
          fa_rotated$loadings[,2],
          labels = rownames(fa_unrotated$loadings),
          pos = 4, cex = 1)

```
:::

::: column
```{r}
#| echo: false
#| fig-height: 12
#| fig-align: center
#| class-output: "remark-code"

fa_rotated <- fa(r = data, nfactors = 4,rotate = "varimax")

par(mfrow = c(2, 1))
plot(fa_unrotated$loadings[,1],
     fa_unrotated$loadings[,2],
     xlab = "Factor 1",
     ylab = "Factor 2",
     ylim = c(-1, 1),
     xlim = c(-1, 1),
     main = "No rotation",
     pch = 19,
     cex = 2,
     col = "#6c757d") 
     abline(h=0, v=0)
     text(fa_unrotated$loadings[,1],
          fa_unrotated$loadings[,2],
          labels = rownames(fa_unrotated$loadings),
          pos = 4, cex = 1)

plot(fa_rotated$loadings[,1],
     fa_rotated$loadings[,2],
     xlab = "Factor 1",
     ylab = "Factor 2",
     ylim = c(-1, 1),
     xlim = c(-1, 1),
     main = "With rotation",
     pch = 19,
     cex = 2,
     col = "#6c757d")
     abline(h=0, v=0)
     text(fa_rotated$loadings[,1],
          fa_rotated$loadings[,2],
          labels = rownames(fa_unrotated$loadings),
          pos = 4, cex = 1)

```
:::
:::::

## Factor rotation

::::: columns
::: column
#### Orthogonal rotation

-   axes are maintained at 90 degrees

-   orthogonal rotation methods

    -   Varimax - *most commonly used*

    -   Quartimax

    -   Equimax

-   Check-out some of these references

    -   [IBM](https://www.ibm.com/docs/de/spss-statistics/24.0.0?topic=analysis-factor-rotation)

    -   [Factor analysis](http://statweb.stanford.edu/~susan/courses/stats305c/examplesFA.html)
:::

::: column
![](image/orthogonal.png){fig-align="center" width="100%"}
:::
:::::

## Factor rotation

#### Orthogonal rotation

::::: columns
::: column
```{r}
#| echo: true
#| eval: false
#| class-output: "remark-code"

fa_varimax <- fa(r = data, nfactors = 4,rotate = "varimax")
fa_quartimax <- fa(r = data, nfactors = 4,rotate = "quartimax")
fa_equamax <- fa(r = data, nfactors = 4,rotate = "equamax")

par(mfrow = c(2, 2))

plot(fa_unrotated$loadings[,1],
     fa_unrotated$loadings[,2],
     xlab = "Factor 1",
     ylab = "Factor 2",
     ylim = c(-1, 1),
     xlim = c(-1, 1),
     main = "No rotation",
     cex.main = 3,
     pch = 19,
     cex = 4,
     col = "#6c757d") 
     abline(h=0, v=0)
     text(fa_unrotated$loadings[,1],
          fa_unrotated$loadings[,2],
          labels = rownames(fa_unrotated$loadings),
          pos = 4, cex = 2)
     
plot(fa_varimax$loadings[,1],
     fa_varimax$loadings[,2],
     xlab = "Factor 1",
     ylab = "Factor 2",
     ylim = c(-1, 1),
     xlim = c(-1, 1),
     main = "Varimax",
     cex.main = 3,
     pch = 19,
     cex = 4,
     col = "#6c757d") 
     abline(h=0, v=0)
     text(fa_varimax$loadings[,1],
          fa_varimax$loadings[,2],
          labels = rownames(fa_varimax$loadings),
          pos = 4, cex = 2)

plot(fa_quartimax$loadings[,1],
     fa_quartimax$loadings[,2],
     xlab = "Factor 1",
     ylab = "Factor 2",
     ylim = c(-1, 1),
     xlim = c(-1, 1),
     main = "Quartimax",
     cex.main = 3,
     pch = 19,
     cex = 4,
     col = "#6c757d") 
     abline(h=0, v=0)
     text(fa_quartimax$loadings[,1],
          fa_quartimax$loadings[,2],
          labels = rownames(fa_quartimax$loadings),
          pos = 4, cex = 2)
     
plot(fa_equamax$loadings[,1],
     fa_equamax$loadings[,2],
     xlab = "Factor 1",
     ylab = "Factor 2",
     ylim = c(-1, 1),
     xlim = c(-1, 1),
     main = "Equamax",
     cex.main = 3,
     pch = 19,
     cex = 4,
     col = "#6c757d") 
     abline(h=0, v=0)
     text(fa_equamax$loadings[,1],
          fa_equamax$loadings[,2],
          labels = rownames(fa_equamax$loadings),
          pos = 4, cex = 2)



```
:::

::: column
```{r}
#| echo: false
#| fig-height: 20
#| fig-width: 18
#| fig-align: center
#| class-output: "remark-code"

fa_varimax <- fa(r = data, nfactors = 4,rotate = "varimax")
fa_quartimax <- fa(r = data, nfactors = 4,rotate = "quartimax")
fa_equamax <- fa(r = data, nfactors = 4,rotate = "equamax")

par(mfrow = c(2, 2))

plot(fa_unrotated$loadings[,1],
     fa_unrotated$loadings[,2],
     xlab = "Factor 1",
     ylab = "Factor 2",
     ylim = c(-1, 1),
     xlim = c(-1, 1),
     main = "No rotation",
     cex.main = 3,
     pch = 19,
     cex = 4,
     col = "#6c757d") 
     abline(h=0, v=0)
     text(fa_unrotated$loadings[,1],
          fa_unrotated$loadings[,2],
          labels = rownames(fa_unrotated$loadings),
          pos = 4, cex = 2)
     
plot(fa_varimax$loadings[,1],
     fa_varimax$loadings[,2],
     xlab = "Factor 1",
     ylab = "Factor 2",
     ylim = c(-1, 1),
     xlim = c(-1, 1),
     main = "Varimax",
     cex.main = 3,
     pch = 19,
     cex = 4,
     col = "#6c757d") 
     abline(h=0, v=0)
     text(fa_varimax$loadings[,1],
          fa_varimax$loadings[,2],
          labels = rownames(fa_varimax$loadings),
          pos = 4, cex = 2)

plot(fa_quartimax$loadings[,1],
     fa_quartimax$loadings[,2],
     xlab = "Factor 1",
     ylab = "Factor 2",
     ylim = c(-1, 1),
     xlim = c(-1, 1),
     main = "Quartimax",
     cex.main = 3,
     pch = 19,
     cex = 4,
     col = "#6c757d") 
     abline(h=0, v=0)
     text(fa_quartimax$loadings[,1],
          fa_quartimax$loadings[,2],
          labels = rownames(fa_quartimax$loadings),
          pos = 4, cex = 2)
     
plot(fa_equamax$loadings[,1],
     fa_equamax$loadings[,2],
     xlab = "Factor 1",
     ylab = "Factor 2",
     ylim = c(-1, 1),
     xlim = c(-1, 1),
     main = "Equamax",
     cex.main = 3,
     pch = 19,
     cex = 4,
     col = "#6c757d") 
     abline(h=0, v=0)
     text(fa_equamax$loadings[,1],
          fa_equamax$loadings[,2],
          labels = rownames(fa_equamax$loadings),
          pos = 4, cex = 2)



```
:::
:::::

## Factor rotation

::::: columns
::: column
#### Oblique rotation rotation

-   allow correlated factors

-   suited to the goal of theoretically meaningful constructs

-   oblique rotation methods

    -   Promax

    -   Oblimin
:::

::: column
![](image/oblique.png){fig-align="center" width="90%"}
:::
:::::

## Factor rotation

#### Oblique rotation

::::: columns
::: column
```{r}
#| echo: true
#| eval: false
#| class-output: "remark-code"

fa_promax <- fa(r = data, nfactors = 4,rotate = "promax")
fa_oblimin <- fa(r = data, nfactors = 4,rotate = "oblimin")


par(mfrow = c(1, 3))

plot(fa_unrotated$loadings[,1],
     fa_unrotated$loadings[,2],
     xlab = "Factor 1",
     ylab = "Factor 2",
     ylim = c(-1, 1),
     xlim = c(-1, 1),
     main = "No rotation",
     pch = 19,
     col = "#6c757d") 
     abline(h=0, v=0)
     text(fa_unrotated$loadings[,1],
          fa_unrotated$loadings[,2],
          labels = rownames(fa_unrotated$loadings),
          pos = 4, cex = 0.5)
     
plot(fa_promax$loadings[,1],
     fa_promax$loadings[,2],
     xlab = "Factor 1",
     ylab = "Factor 2",
     ylim = c(-1, 1),
     xlim = c(-1, 1),
     main = "Promax",
     pch = 19,
     col = "#6c757d") 
     abline(h=0, v=0)
     text(fa_promax$loadings[,1],
          fa_promax$loadings[,2],
          labels = rownames(fa_promax$loadings),
          pos = 4, cex = 0.5)

plot(fa_oblimin$loadings[,1],
     fa_oblimin$loadings[,2],
     xlab = "Factor 1",
     ylab = "Factor 2",
     ylim = c(-1, 1),
     xlim = c(-1, 1),
     main = "Oblimin",
     pch = 19,
     col = "#6c757d") 
     abline(h=0, v=0)
     text(fa_oblimin$loadings[,1],
          fa_oblimin$loadings[,2],
          labels = rownames(fa_oblimin$loadings),
          pos = 4, cex = 0.5)
     
```
:::

::: column
```{r}
#| echo: false
#| fig-height: 11.7
#| fig-align: center
#| class-output: "remark-code"

fa_promax <- fa(r = data, nfactors = 4,rotate = "promax")
fa_oblimin <- fa(r = data, nfactors = 4,rotate = "oblimin")


par(mfrow = c(3, 1))

plot(fa_unrotated$loadings[,1],
     fa_unrotated$loadings[,2],
     xlab = "Factor 1",
     ylab = "Factor 2",
     ylim = c(-1, 1),
     xlim = c(-1, 1),
     main = "No rotation",
     cex.main = 2.5,
     pch = 19,
     cex = 2,
     col = "#6c757d") 
     abline(h=0, v=0)
     text(fa_unrotated$loadings[,1],
          fa_unrotated$loadings[,2],
          labels = rownames(fa_unrotated$loadings),
          pos = 4, cex = 2)
     
plot(fa_promax$loadings[,1],
     fa_promax$loadings[,2],
     xlab = "Factor 1",
     ylab = "Factor 2",
     ylim = c(-1, 1),
     xlim = c(-1, 1),
     main = "Promax",
     cex.main = 2.5,
     pch = 19,
     cex = 2,
     col = "#6c757d") 
     abline(h=0, v=0)
     text(fa_promax$loadings[,1],
          fa_promax$loadings[,2],
          labels = rownames(fa_promax$loadings),
          pos = 4, cex = 2)

plot(fa_oblimin$loadings[,1],
     fa_oblimin$loadings[,2],
     xlab = "Factor 1",
     ylab = "Factor 2",
     ylim = c(-1, 1),
     xlim = c(-1, 1),
     main = "Oblimin",
     cex.main = 2.5,
     pch = 19,
     cex = 2,
     col = "#6c757d") 
     abline(h=0, v=0)
     text(fa_oblimin$loadings[,1],
          fa_oblimin$loadings[,2],
          labels = rownames(fa_oblimin$loadings),
          pos = 4, cex = 2)
     
```
:::
:::::

## Factor interpretation and respecification

::::: columns
::: column
-   each variable has a high loadings on one factor only

-   each factor has a high loadings for only a subset of the items.
:::

::: column
```{r}
#| echo: true
#| eval: false
#| class-output: "remark-code"
fa_varimax <- fa(r = data, nfactors = 4, rotate = "varimax")
print(fa_varimax$loadings, sort = TRUE)
```

<br>

```{r}
#| echo: true
#| eval: true
#| class-output: "remark-code"
fa_varimax <- fa(r = data, nfactors = 4, rotate = "varimax")
print(fa_varimax$loadings, sort = TRUE)
```
:::
:::::

## Factor interpretation and respecification

::::: columns
::: column
-   each variable has a high loadings on one factor only

-   each factor has a high loadings for only a subset of the items.
:::

::: column
```{r}
#| echo: true
#| eval: false
#| class-output: "remark-code"
fa_varimax <- fa(r = data, nfactors = 4, rotate = "varimax")
print(fa_varimax$loadings, sort = TRUE, cutoff = 0.4)
```

<br>

```{r}
#| echo: true
#| eval: true
#| class-output: "remark-code"
fa_varimax <- fa(r = data, nfactors = 4, rotate = "varimax")
print(fa_varimax$loadings, sort = TRUE, cutoff = 0.4)
```
:::
:::::

## Factor interpretation and respecification

::::: columns
::: column
What to do with cross-loadings?

Ratio of variance (*JF Hair et al. 2019*)

-   1 to 1.5 - problematic
-   1.5 to 2.0 - potential cross-loading
-   2.0 and higher - ignorable

Example:

-   $X_{11}$
-   `MR1`: 0.525
-   `MR2`: 0.712
-   $0.712^2 \div 0.525^2 = 1.8$
:::

::: column
```{r}
#| echo: true
#| eval: false
#| class-output: "remark-code"
fa_varimax <- fa(r = data, nfactors = 4, rotate = "varimax")
print(fa_varimax$loadings, sort = TRUE, cutoff = 0.4)
```

<br>

```{r}
#| echo: true
#| eval: true
#| class-output: "remark-code"
fa_varimax <- fa(r = data, nfactors = 4, rotate = "varimax")
print(fa_varimax$loadings, sort = TRUE, cutoff = 0.4)
```
:::
:::::

## Factor interpretation and respecification

#### Naming of factors

::::: columns
::: column
-   **MR1: Postsale customer service**

    -   x9 Complaint resolutions

    -   x16 Order & Billing

    -   x18 Delivery speed

-   **MR2: Marketing**

    -   x7 E-Commerce

    -   x10 Advertising

    -   x12 Salesforce image
:::

::: column
-   **MR3: Technical support**

    -   x8 Technical support

    -   x14 Warranty and claims

-   **MR4: Product value**

    -   x6 Product quality

    -   x11 Product line

    -   x13 Competitive pricing
:::
:::::

------------------------------------------------------------------------

## Factor interpretation and respecification

#### Extracting factor scores

::::: columns
::: column
-   **MR1: Postsale customer service**

-   **MR2: Marketing**

-   **MR3: Technical support**

-   **MR4: Product value**
:::

::: column
```{r}
#| echo: true
#| eval: false
#| class-output: "remark-code"
fa_varimax$scores %>% round(4) %>% data.frame() %>% tibble()
```

<br>

```{r}
#| echo: true
#| eval: true
#| class-output: "remark-code"
fa_varimax$scores %>% round(4) %>% data.frame() %>% tibble()
```
:::
:::::

# Let's practice!

## 

![](image/econ149-hex-logo.png){fig-align="center" height="40%" width="40%"}
